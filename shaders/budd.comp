#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const uint length = 16384;
const uint worksize = 16130;
const uint minsteps = 8000;

layout(binding = 0) readonly buffer InData { // Input buffer binding
	dvec2 data[];
} inputData;

layout(binding = 1) writeonly buffer OutData { // Output buffer binding
	dvec2 data[][length];
} outputData;

dvec2 squareComplex(dvec2 number){
	return dvec2(
		(number.x * number.x) - (number.y * number.y),
				 2.0lf * number.x * number.y
	);
}

double sqlen(dvec2 vec) {
	return (vec.x * vec.x) + (vec.y * vec.y);
}

void main() {
	uint myx = gl_WorkGroupID.x;

// 	uint index = myx + myy * 32; // Index of current thread

	dvec2 c = inputData.data[myx];
	dvec2 z = dvec2(0, 0);

// 	int length = sizeof(outputData.data) / sizeof(outputData.data[0]);

	for (int i = 0; i < length; i++)
		outputData.data[myx][i] = dvec2(0, 0);

	for (int i = 0; i < length; i++)
	{
		z = squareComplex(z) + c;
		if (sqlen(z) >= 4.0lf) {
			outputData.data[myx][i] = dvec2(4, 4);
			if (i < minsteps)
				outputData.data[myx][0] = dvec2(0, 0);
			return;
		}
		outputData.data[myx][i] = z;
	}
	outputData.data[myx][0] = dvec2(0, 0);
}
